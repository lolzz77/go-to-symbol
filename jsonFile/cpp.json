{
    "comment" : {
        "regexes" : [
            {
                "comment" : ["detects multiline `/**/` comments."],
                "regex" : ["\\s*\/\\*[^*]*\\*+(?:[^\/*][^*]*\\*+)*\/", "g"],
                "symbolNameIndex" : 0,
                "operation" : "remove",
                "opening" : ["", ""],
                "ignoreCommentedCode" : false
            },
            {
                "comment" : ["detects `//`. This will match til newline, despite in the comment has `\n`, it still can match. Note: to escape `/`(forward slash), you only need one `backslash`, not two"],
                "regex" : ["\\s*\/\/.*", "g"],
                "symbolNameIndex" : 0,
                "operation" : "remove",
                "opening" : ["", ""],
                "ignoreCommentedCode" : false,
                "comment2" : "History - means old regex, not using it anymore, but just put here for memories. Detects both `//` and multiline `/**/` comments. however, this detects '//' first. This can cause problem when there's `//` inside `/**/`, then it will detects `//` isnide of it first",
                "history" : ["\\/\\/.*|\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\/\\n", "g"]
            }
        ]
    },
    "function" : {
        "regexes" : [
            {
                "comment6" : "Regex has to be from longest to shortest. Eg: regex to match `static int main()` and `int main()`. Run the regex that matches `static int main()` first.",
                "comment" : ["Sample: static unsigned int main () {"],
                "regex" : ["([a-zA-Z0-9_*]+)\\s+([a-zA-Z0-9_*]+)\\s+([a-zA-Z0-9_*]+)\\s+((?!(if|while|for)\\s*)[a-zA-Z0-9_*]+)\\s*(\\([^\\)]+\\))\\s*[^\\n]*\\{", "g"],
                "comment4" : "The regex matched will result in array. Based on number of groups you defined in your regex, this number tells my code which array index I should take. This is intended to print out the symbol name. Index 0 is always the whole regex. Index 1 starts your 1st group matching.",
                "symbolNameIndex" : 4,
                "comment2" : "Can be null. This operation is to tell my code how should i handle it. Currently has 'depth', 'remove', ''. depth - i will perform depth search, will use 'opening' key. 'remove' - will perform operation to remove it from buffered text, will not print on the tree list. '' - will fall into else case",
                "operation" : "depth",
                "comment3" : "Can be null. Only appplies if your operation is `depth`. This tells my code, what is the opening & closing symbols. For depth searching.",
                "opening" : ["{", "}"],
                "comment5" : "true/false. True - will print out in the list even if it is commented. False - will not print out in the list if it is commented. This tells my code, if it is commented, ignore it, print it out onto the list. Note: initially intended for MACRO regex. Havent test for other regex. Might be not working for others. Havent test.",
                "ignoreCommentedCode" : false,
                "comment0" : "1st group matching has to be `1 or more`, tho my 1st group matching is for `static` those kind. But, regex matches from lef to right. Thus, for function that doesn't have `static`, and if i put my 1st group matching to `zero or more`, it will matches the 1st group matching. Thus, you should NOT set 1st group matching to `zero or more`. You should treat the 1st matching as `return type`. Thus, if you found a new function has more symbols before the `return type`, add them before the `(` in the regex, and put them `zero or more`.",
                "comment1" : "CANNOT be null. 1st group matching is `inline|static` etc  (note: i put `1 or more`, please read above comment why). Then is words like `unsigned` etc. Then is function return type like `int`. Then compulsory white space. Then function name, then optional whitespace. Then match `(`, then match anything not equal to ), then match match {.",
                "history" : ["([a-zA-Z0-9_*]+)\\s+([a-zA-Z0-9_*]+)\\s*([a-zA-Z0-9_*]*)\\s*([a-zA-Z0-9_*]*)\\s*\\([^)]*\\)\\s*\\{", "g"]
            },
            {
                "comment" : ["Sample: static int main () {"],
                "regex" : ["([a-zA-Z0-9_*]+)\\s+([a-zA-Z0-9_*]+)\\s+((?!(if|while|for)\\s*)[a-zA-Z0-9_*]+)\\s*(\\([^\\)]+\\))\\s*[^\\n]*\\{", "g"],
                "symbolNameIndex" : 3,
                "operation" : "depth",
                "opening" : ["{", "}"],
                "ignoreCommentedCode" : false
            },
            {
                "comment" : ["Sample: int main () {"],
                "regex" : ["([a-zA-Z0-9_*]+)\\s+((?!(if|while|for)\\s*)[a-zA-Z0-9_*]+)\\s*(\\([^\\)]+\\))\\s*[^\\n]*\\{","g"],
                "symbolNameIndex" : 2,
                "operation" : "depth",
                "opening" : ["{", "}"],
                "ignoreCommentedCode" : false
            }
        ]
    },
    "class" : {
        "regexes" : [
            {
                "comment" : ["Sample: void ClassName::ClassName()",
                            "Sample: void ClassName::~ClassName()"],
                "regex" : ["([a-zA-Z0-9_*]+)\\s*([a-zA-Z0-9_*]+)\\s*::\\s*([a-zA-Z0-9_*~]+)\\s*\\(([^\\)]*)\\)\\s*\\{", "g"],
                "symbolNameIndex" : 3,
                "operation" : "depth",
                "opening" : ["{", "}"],
                "ignoreCommentedCode" : false
            },
            {
                "comment" : ["Sample: ClassName::ClassName()",
                            "Sample: ClassName::~ClassName()"],
                "regex" : ["([a-zA-Z0-9_*]+)\\s*::\\s*([a-zA-Z0-9_*~]+)\\s*\\(([^\\)]*)\\)\\s*\\{", "g"],
                "symbolNameIndex" : 2,
                "operation" : "depth",
                "opening" : ["{", "}"],
                "ignoreCommentedCode" : false
            }
        ]
    },
    "union" : {
        "regexes" : [
            {
                "comment" : ["Sample: typdef union UnionName { A, B, C }",
                            "Sample: typdef union { A, B, C }"],
                "regex" : ["(typedef)\\s+(union)\\s+([a-zA-Z0-9_]*)\\s*\\{", "g"],
                "symbolNameIndex" : 3,
                "operation" : "depth",
                "opening" : ["{", "}"],
                "ignoreCommentedCode" : false
            },
            {
                "comment" : ["Sample: union UnionName { A, B, C }",
                            "Sample: union { A, B, C }"],
                "regex" : ["(union)\\s+([a-zA-Z0-9_]*)\\s*\\{", "g"],
                "symbolNameIndex" : 2,
                "operation" : "depth",
                "opening" : ["{", "}"],
                "ignoreCommentedCode" : false
            }
        ]
    },
    "struct" : {
        "regexes" : [
            {
                "comment" : ["Sample: typedef struct StructName { int x, int y }",
                            "Sample: typedef struct { int x, int y }"],
                "regex" : ["([typedef|extern]+)\\s+(struct)\\s+([a-zA-Z0-9_]*)\\s*\\{", "g"],
                "symbolNameIndex" : 3,
                "operation" : "depth",
                "opening" : ["{", "}"],
                "ignoreCommentedCode" : false
            },
            {
                "comment" : ["Sample: struct StructName { int x, int y }",
                            "Sample: struct { int x, int y }"],
                "regex" : ["(struct)\\s+([a-zA-Z0-9_]*)\\s*\\{", "g"],
                "symbolNameIndex" : 2,
                "operation" : "depth",
                "opening" : ["{", "}"],
                "ignoreCommentedCode" : false
            }
        ]
    },
    "enum" : {
        "regexes" : [
            {
                "comment" : ["Sample: typedef enum EnumName { A, B, C }"],
                "regex" : ["([typedef|extern]+)\\s+(enum)\\s+([a-zA-Z0-9_]*)\\s*\\{", "g"],
                "symbolNameIndex" : 3,
                "operation" : "depth",
                "opening" : ["{", "}"],
                "ignoreCommentedCode" : false
            },
            {
                "comment" : ["Sample: enum EnumName { A, B, C }",
                            "Sample: enum { A, B, C }"],
                "regex" : ["(enum)\\s+([a-zA-Z0-9_]*)\\s*\\{", "g"],
                "symbolNameIndex" : 2,
                "operation" : "depth",
                "opening" : ["{", "}"],
                "ignoreCommentedCode" : false
            }
        ]
    },
    "macro" : {
        "regexes" : [
            {
                "comment" : ["Sample: #define MACRO TEST \"HELLO\""],
                "regex" : ["(#define)\\s+([a-zA-Z0-9_*]+)\\s+([^\\n|\"]+\\s*)\"", "g"],
                "symbolNameIndex" : 2,
                "operation" : "",
                "opening" : ["", ""],
                "ignoreCommentedCode" : true
            },
            {
                "comment" : ["Sample : #define MACRO x-2",
                            "Sample: #define MACRO ",
                            "Sample: #define MACRO x-2//comment"],
                "comment1" : "Note: Dont matchnewline at the end. It fail to match #define that has comment behind",
                "regex" : ["(#define)\\s+([a-zA-Z0-9_*]+)\\s*([a-zA-Z0-9_*]*)\\s*", "g"],
                "symbolNameIndex" : 2,
                "operation" : "",
                "opening" : ["", ""],
                "ignoreCommentedCode" : true
            },
            {
                "comment" : ["Sample : #define MACRO VALUE1 VALUE2 VALUE3 \\",
                            "Sample: #define MACRO\\"],
                "regex" : ["(#define)\\s+([a-zA-Z0-9_*]+)\\s*([^\\\\\\n])*\\s*\\\\\\n", "g"],
                "symbolNameIndex" : 2,
                "operation" : "",
                "opening" : ["", ""],
                "ignoreCommentedCode" : true
            }
        ]
    },
    "guard": {
        "regexes" : [
            {
                "comment": ["Sample: #ifdef WORD",
                "Sample: #ifndef WORD"],
                "regex": ["(#ifdef|#ifndef)\\s+([a-zA-Z0-9_*]+)", "g"],
                "symbolNameIndex" : 2,
                "operation": "range",
                "opening": ["", ""],
                "ignoreCommentedCode": true
            },
            {
                "comment": ["Sample: #if defined(WORD)"],
                "regex": ["((?:#elif|#if)\\s+defined)\\s*\\(\\s*([a-zA-Z0-9_*]+)\\s*\\)", "g"],
                "symbolNameIndex" : 2,
                "operation": "range",
                "opening": ["", ""],
                "ignoreCommentedCode": true
            },
            {
                "comment": ["Sample: #if !defined(WORD)",
                            "Sample: #if (defined(WORD))"],
                            "regex": ["((?:#elif|#if)\\s+[!\\( ]+\\s*defined)\\s*\\(\\s*([a-zA-Z0-9_*]+)\\s*\\)", "g"],
                "symbolNameIndex" : 2,
                "operation": "range",
                "opening": ["", ""],
                "ignoreCommentedCode": true
            },
            {
                "comment": ["Sample: #if defined WORD"],
                "regex": ["((?:#elif|#if)\\s+defined)\\s+([a-zA-Z0-9_*]+)", "g"],
                "symbolNameIndex" : 2,
                "operation": "range",
                "opening": ["", ""],
                "ignoreCommentedCode": true
            },
            {
                "comment": ["Sample: #if !defined WORD"],
                "regex": ["((?:#elif|#if)\\s+[^defined]+\\s*defined)\\s+([a-zA-Z0-9_*]+)", "g"],
                "symbolNameIndex" : 2,
                "operation": "range",
                "opening": ["", ""],
                "ignoreCommentedCode": true
            },
            {
                "comment": ["Sample: #if WORD",
                            "Sample: #if (WORD||WORD2)"],
                "comment1" : "for some reason, putting `\\t` inside group `[]` doesnt work. Put ` ` the literally whitespace works. And, if you put `\\s`, it will match whitespace, and newline.",
                "regex": ["(#if|#elif)\\s+((?<!defined)[a-zA-Z0-9_*\\(\\)&|= ]+)\\n", "g"],
                "symbolNameIndex" : 2,
                "operation": "range",
                "opening": ["", ""],
                "ignoreCommentedCode": true
            },
            {
                "comment": ["Sample: #else"],
                "regex": ["(#else)", "g"],
                "symbolNameIndex" : 1,
                "operation": "range",
                "opening": ["", ""],
                "ignoreCommentedCode": true
            }
        ]
    },
    "function_prototype" : {
        "regexes" : [
            {
                "comment" : ["Sample: static? unsigned? int main ();"],
                "comment2" : "Question mark means can be either present or not present. It can detect all",
                "regex" : ["([a-zA-Z0-9_*]*)\\s*([a-zA-Z0-9_*]+)\\s+([a-zA-Z0-9_*]+)\\s*\\([^)]*\\)\\s*;", "g"],
                "symbolNameIndex" : 0,
                "operation" : "remove",
                "opening" : ["", ""],
                "ignoreCommentedCode" : false
            }
        ]
    },
    "include" : {
        "regexes" : [
            {
                "comment" : ["Sample: #include <stdio.h>, #include 'myHeader.h'"],
                "regex" : ["(#include)\\s+([^\\n]+)\\s*\\n", "g"],
                "symbolNameIndex" : 0,
                "operation" : "remove",
                "opening" : ["", ""],
                "ignoreCommentedCode" : false
            }
        ]
    },
    "global" : {
        "regexes" : [
            {
                "comment" : ["Sample: static int VariableName[] = { [1,2], [3,4] }"],
                "comment1" : "it is today i learnt that, \\s will also match newline. The best way is [ \\t]+",
                "regex" : ["([a-zA-Z0-9_*]+)\\s+([a-zA-Z0-9_*]+)\\s+([a-zA-Z0-9_*]+)\\s*(\\[[^\\]]*\\])\\s*=\\s*\\{", "g"],
                "symbolNameIndex" : 3,
                "operation" : "depth",
                "opening" : ["{", "}"],
                "ignoreCommentedCode" : false
            },
            {
                "comment" : ["Sample: int VariableName[] = { [1,2], [3,4] }"],
                "regex" : ["([a-zA-Z0-9_*]+)\\s+([a-zA-Z0-9_*]+)\\s*(\\[[^\\]]*\\])\\s*=\\s*\\{", "g"],
                "symbolNameIndex" : 2,
                "operation" : "depth",
                "opening" : ["{", "}"],
                "ignoreCommentedCode" : false
            },
            {
                "comment" : ["Sample: static int VariableName;"],
                "regex" : ["([a-zA-Z0-9_*]+)\\s+([a-zA-Z0-9_*]+)\\s+([a-zA-Z0-9_*]+)\\s*;", "g"],
                "symbolNameIndex" : 3,
                "operation" : "",
                "opening" : ["", ""],
                "ignoreCommentedCode" : false
            },
            {
                "comment" : ["Sample: int VariableName;",
                            "Sample; int VariableName[];"],
                "comment2" : "this regex has some flaw. Last part, it says match til you see `;` and `}`. If saw `}` first, then it will exit. Then it will match `;`. However, in some cases, a global variable may be an array, and inside the global variable, it conatins `}`. Then, after `}`, may contain other things, only then last part is `;`. However, good thing is that it wont stuck in a loop. Solution: I create antoher global regex above of this.",
                "regex" : ["([a-zA-Z0-9_*]+)[ \\t]+([a-zA-Z0-9_*\\[\\]]+)\\s*;", "g"],
                "symbolNameIndex" : 2,
                "operation" : "",
                "opening" : ["", ""],
                "ignoreCommentedCode" : false
            },
            {
                "comment" : ["Sample: static int VariableName = 5;",
                            "Sample: static in VariableName[] = '00';"],
                "regex" : ["([a-zA-Z0-9_*]+)[ \\t]+([a-zA-Z0-9_*]+)\\s+([a-zA-Z0-9_*\\[\\]]+)\\s*=\\s*([^;|\\n]*);", "g"],
                "symbolNameIndex" : 3,
                "operation" : "",
                "opening" : ["", ""],
                "ignoreCommentedCode" : false
            },
            {
                "comment" : ["Sample: int VariableName = 5;"],
                "regex" : ["([a-zA-Z0-9_*]+)[ \\t]+([a-zA-Z0-9_*]+)\\s*=\\s*([^;|\\n]*);", "g"],
                "symbolNameIndex" : 2,
                "operation" : "",
                "opening" : ["", ""],
                "ignoreCommentedCode" : false
            }
        ]
    }
}