{
    "function" : {
        "comment0" : "1st group matching has to be `1 or more`, tho my 1st group matching is for `static` those kind. But, regex matches from lef to right. Thus, for function that doesn't have `static`, and if i put my 1st group matching to `zero or more`, it will matches the 1st group matching. Thus, you should NOT set 1st group matching to `zero or more`. You should treat the 1st matching as `return type`. Thus, if you found a new function has more symbols before the `return type`, add them before the `(` in the regex, and put them `zero or more`.",
        "comment1" : "CANNOT be null. 1st group matching is `inline|static` etc  (note: i put `1 or more`, please read above comment why). Then is words like `unsigned` etc. Then is function return type like `int`. Then compulsory white space. Then function name, then optional whitespace. Then match `(`, then match anything not equal to ), then match match {.",
        "whole" : ["([a-zA-Z0-9_*]+)\\s+([a-zA-Z0-9_*]+)\\s*([a-zA-Z0-9_*]*)\\s*([a-zA-Z0-9_*]*)\\s*\\([^)]*\\)\\s*\\{", "g"],
        "comment2" : "Can be null. This operation is to tell my code how should i handle it. Currently has 'depth', 'remove', ''. depth - i will perform depth search, will use 'opening' key. 'remove' - will perform operation to remove it from buffered text, will not print on the tree list. '' - will fall into else case",
        "operation" : "depth",
        "comment3" : "Can be null. This tells my code, what is the opening & closing symbols. For depth searching.",
        "opening" : ["{", "}"],
        "comment4" : "Can be null. Can be either `before` or `after`. Can be multiple. If multiple, will search for the closest index. This is for cases that have either, eg: global variable, a symbol name can be before `=` or `;`. This tells my code, what symbol to look for to extract the symbol name.",
        "before" : ["("],
        "comment5" : "true/false. True - will print out in the list even if it is commented. False - will not print out in the list if it is commented. This tells my code, if it is commented, ignore it, print it out onto the list. Note: initially intended for MACRO regex. Havent test for other regex. Might be not working for others. Havent test.",
        "ignoreCommentedCode" : false
    },
    "class" : {
        "comment1" : "",
        "whole" : ["^\\s*class\\s+\\w+\\s*\\{", "gm"],
        "operation" : "depth",
        "opening" : ["{", "}"],
        "before" : ["("],
        "ignoreCommentedCode" : false
    },
    "union" : {
        "comment1" : "",
        "whole" : ["([typedef]*)\\s*union\\s*[a-zA-Z0-9_]*\\s*\\{", "g"],
        "operation" : "depth",
        "opening" : ["{", "}"],
        "before" : ["{"],
        "ignoreCommentedCode" : false
    },
    "struct" : {
        "comment1" : "",
        "whole" : ["([typedef|extern]*)\\s*struct\\s*[a-zA-Z0-9_]*\\s*\\{", "g"],
        "operation" : "depth",
        "opening" : ["{", "}"],
        "before" : ["{"],
        "ignoreCommentedCode" : false
    },
    "enum" : {
        "comment1" : "",
        "whole" : ["([typedef|extern]*)\\s*enum\\s+[^{}]*\\{", "g"],
        "operation" : "depth",
        "opening" : ["{", "}"],
        "before" : ["{"],
        "ignoreCommentedCode" : false
    },
    "macro" : {
        "comment1" : "",
        "whole" : ["#define\\s+([^\\n]+)\\n", "g"],
        "operation" : "",
        "opening" : ["", ""],
        "after" : ["define"],
        "ignoreCommentedCode" : true
    },
    "comment1" : {
        "comment1" : "detects `//`. This will match til newline, despite in the comment has `\n`, it still can match",
        "whole" : ["\\/\\/.*", "g"],
        "operation" : "remove",
        "opening" : ["", ""],
        "before" : [""],
        "ignoreCommentedCode" : false,
        "comment2" : "History - means old regex, not using it anymore, but just put here for memories. Detects both `//` and multiline `/**/` comments. however, this detects '//' first. This can cause problem when there's `//` inside `/**/`, then it will detects `//` isnide of it first",
        "history" : ["\\/\\/.*|\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\/\\n", "g"]
    },
    "comment2" : {
        "comment1" : "detects multiline `/**/` comments.",
        "whole" : ["\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\/", "g"],
        "operation" : "remove",
        "opening" : ["", ""],
        "before" : [""],
        "ignoreCommentedCode" : false
    },
    "function_prototype" : {
        "comment1" : "1st group matching is 'static' those kind (will be optional for this). 2nd group is function return type. 3rd group is function name. Then match parenthesis. Then match ';'",
        "whole" : ["([a-zA-Z0-9_*]*)\\s*([a-zA-Z0-9_*]+)\\s+([a-zA-Z0-9_*]+)\\s*\\([^)]*\\)\\s*;", "g"],
        "operation" : "remove",
        "opening" : [""],
        "before" : [""],
        "ignoreCommentedCode" : false
    },
    "include" : {
        "comment1" : "",
        "whole" : ["#include\\s+([^\\n]+)\\s*\\n", "g"],
        "operation" : "remove",
        "opening" : [""],
        "before" : [""],
        "ignoreCommentedCode" : false
    },
    "global" : {
        "comment1" : "Match return type. Then whitespace. Then match variable name. Then match anything except ';' (zero or more, for cases `int x;` will fail the regex). Finally, match ';'",
        "whole" : ["([a-zA-Z0-9_*]+)\\s+([a-zA-Z0-9_*]+)\\s*[^;}]*;", "g"],
        "operation" : "",
        "opening" : ["", ""],
        "before" : ["=", ";"],
        "ignoreCommentedCode" : false
    }
}