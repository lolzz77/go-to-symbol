{
    "function" : {
        "comment0" : "1st group matching has to be `1 or more`, tho my 1st group matching is for `static` those kind. But, regex matches from lef to right. Thus, for function that doesn't have `static`, and if i put my 1st group matching to `zero or more`, it will matches the 1st group matching. Thus, you should NOT set 1st group matching to `zero or more`. You should treat the 1st matching as `return type`. Thus, if you found a new function has more symbols before the `return type`, add them before the `(` in the regex, and put them `zero or more`.",
        "comment1" : "1st group matching is `inline|static` etc  (note: i put `1 or more`, please read above comment why). Then is words like `unsigned` etc. Then is function return type like `int`. Then compulsory white space. Then function name, then optional whitespace. Then match `(`, then match anything not equal to ), then match match {.",
        "whole" : ["([a-zA-Z0-9_*]+)\\s+([a-zA-Z0-9_*]+)\\s*([a-zA-Z0-9_*]*)\\s*([a-zA-Z0-9_*]*)\\s*\\([^)]*\\)\\s*\\{", "g"],
        "comment2" : "this operation is to tell my code how should i handle it. Currently has 'depth', 'remove', ''. depth - i will perform depth search, will use 'opening' key. 'remove' - will perform operation to remove it from buffered text, will not print on the tree list. '' - will fall into else case",
        "operation" : "depth",
        "opening" : ["{", "}"],
        "before" : ["("]
    },
    "class" : {
        "comment1" : "",
        "whole" : ["^\\s*class\\s+\\w+\\s*\\{", "gm"],
        "operation" : "depth",
        "opening" : ["{", "}"],
        "before" : ["("]
    },
    "struct" : {
        "comment1" : "",
        "whole" : ["([typedef]*)\\s*struct\\s*[a-zA-Z0-9_]*\\s*\\{", "g"],
        "operation" : "depth",
        "opening" : ["{", "}"],
        "before" : ["{"]
    },
    "enum" : {
        "comment1" : "",
        "whole" : ["([typedef]*)\\s*enum\\s+[^{}]*\\{", "g"],
        "operation" : "depth",
        "opening" : ["{", "}"],
        "before" : ["{"]
    },
    "macro" : {
        "comment1" : "",
        "whole" : ["#define\\s+([^\\n]+)\\n", "g"],
        "operation" : "",
        "opening" : ["", ""],
        "after" : ["define"]
    },
    "comment" : {
        "comment1" : "detects both `//` and multiline `/**/` comments",
        "whole" : ["\\/\\/.*|\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\/\\n", "g"],
        "operation" : "remove",
        "opening" : ["", ""],
        "before" : [""]
    },
    "function_prototype" : {
        "comment1" : "1st group matching is 'static' those kind (will be optional for this). 2nd group is function return type. 3rd group is function name. Then match parenthesis. Then match ';'",
        "whole" : ["([a-zA-Z0-9_*]*)\\s*([a-zA-Z0-9_*]+)\\s+([a-zA-Z0-9_*]+)\\s*\\([^)]*\\)\\s*;", "g"],
        "operation" : "remove",
        "opening" : [""],
        "before" : [""]
    },
    "include" : {
        "comment1" : "",
        "whole" : ["#include\\s+([^\\n]+)\\s*\\n", "g"],
        "operation" : "remove",
        "opening" : [""],
        "before" : [""]
    },
    "global" : {
        "comment1" : "Match return type. Then whitespace. Then match variable name. Then match anything except ';' . Finally, match ';'",
        "whole" : ["([a-zA-Z0-9_*]+)\\s+([a-zA-Z0-9_*]+)\\s*[^;]+;", "g"],
        "operation" : "",
        "opening" : ["", ""],
        "before" : ["=", ";"]
    }
}