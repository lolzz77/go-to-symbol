{
    "function" : {
        "myComment" : "1st group matching is function return type, then compulsory white space, then function name, then option whitespace, then match (, then match anything not equal to ), then match match {.",
        "whole" : ["([a-zA-Z0-9_*]*)\\s+([a-zA-Z0-9_*]*)\\s*\\([^)]*\\)\\s*\\{", "g"],
        "opening" : ["{", "}"],
        "before" : ["("]
    },
    "class" : {
        "myComment" : "",
        "whole" : ["^\\s*class\\s+\\w+\\s*\\{", "gm"],
        "opening" : ["{", "}"],
        "before" : ["("]
    },
    "struct" : {
        "myComment" : "",
        "whole" : ["struct\\s+[^{}]*\\{", "g"],
        "opening" : ["{", "}"],
        "before" : ["{"]
    },
    "enum" : {
        "myComment" : "",
        "whole" : ["enum\\s+[^{}]*\\{", "g"],
        "opening" : ["{", "}"],
        "before" : ["{"]
    },
    "comment" : {
        "myComment" : "",
        "whole" : ["\\/\\/.*|\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\/", "g"],
        "opening" : ["", ""],
        "before" : [""]
    },
    "macro" : {
        "myComment" : "",
        "whole" : ["#define\\s+([^\\n]+)\\n", "g"],
        "opening" : ["", ""],
        "after" : ["define"]
    },
    "global" : {
        "myComment" : "match 1 newline, then match anything except ';' & newline, at least one. Then match ';'",
        "whole" : ["\\n[^;\\n]+;", "g"],
        "opening" : ["", ""],
        "before" : ["=", ";"]
    }
}